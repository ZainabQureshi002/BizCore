@model BizCore.Models.ViewModels.OrderCreateViewModel

@{
    ViewData["Title"] = "Create Order";
}

<h2 class="text-center my-4">Create Order</h2>

<form asp-action="Create" method="post" class="p-4 border rounded shadow-sm bg-light">
    <div class="form-group">
        <!-- Order Type Selection -->
        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="Order.OrderTypeId" class="form-label">Order Type</label>
                <select asp-for="Order.OrderTypeId" class="form-select" id="orderTypeSelect">
                    <option value="">-- Select Order Type --</option>
                    <option value="1">Customer Order</option>
                    <option value="2">Supplier Order</option>
                </select>
                <span asp-validation-for="Order.OrderTypeId" class="text-danger"></span>
            </div>
        </div>

        <!-- Customer Selection -->
        <div class="row">
            <div class="col-md-6 mb-3" id="customerDiv" style="display:none;">
                <label asp-for="Order.CustomerId" class="form-label">Customer</label>
                <select asp-for="Order.CustomerId" class="form-select" asp-items="Model.Customers"></select>
                <span asp-validation-for="Order.CustomerId" class="text-danger"></span>
            </div>
        </div>

        <!-- Supplier Selection -->
        <div class="row">
            <div class="col-md-6 mb-3" id="supplierDiv" style="display:none;">
                <label asp-for="Order.SupplierId" class="form-label">Supplier</label>
                <select asp-for="Order.SupplierId" class="form-select" asp-items="Model.Suppliers"></select>
                <span asp-validation-for="Order.SupplierId" class="text-danger"></span>
            </div>
        </div>

        <!-- Order Date -->
        <div class="row">
            <div class="col-md-6 mb-3">
                <label asp-for="Order.OrderDate" class="form-label">Order Date</label>
                <input asp-for="Order.OrderDate" class="form-control" type="date" />
                <span asp-validation-for="Order.OrderDate" class="text-danger"></span>
            </div>
        </div>
    </div>

    <h3>Order Items</h3>
    <table id="orderItemsContainer" class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Total Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Order.OrderItems.Count; i++)
            {
                <tr id="orderItem_@i" class="orderItem">
                    <td>
                        <select asp-for="Order.OrderItems[@i].ProductId" class="form-select">
                            <option value="">-- Select Product --</option>
                            @foreach (var product in Model.Products)
                            {
                                <option value="@product.Value">@product.Text</option>
                            }
                        </select>
                        <span asp-validation-for="Order.OrderItems[@i].ProductId" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="Order.OrderItems[@i].Quantity" class="form-control" type="number" min="1" oninput="calculateTotalPrice(@i)" />
                        <span asp-validation-for="Order.OrderItems[@i].Quantity" class="text-danger"></span>
                    </td>
                    <td>
                        <input asp-for="Order.OrderItems[@i].UnitPrice" class="form-control" type="number" step="0.01" oninput="calculateTotalPrice(@i)" />
                        <span asp-validation-for="Order.OrderItems[@i].UnitPrice" class="text-danger"></span>
                    </td>
                    <td>
                        <input type="text" id="totalPrice_@i" class="form-control" readonly />
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeOrderItem(@i)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <h4>Total Order Price</h4>
        <input type="text" id="totalOrderPrice" class="form-control" readonly />
    </div>

    <button type="button" class="btn btn-primary mt-3" id="addOrderItemBtn" onclick="addOrderItem()">Add Item</button>
    <button type="submit" class="btn btn-success mt-4 w-100">Create Order</button>
</form>

@section Scripts {
    <script>
        // Product List Serialization
        const productList = @Html.Raw(Json.Serialize(Model.Products));

        let itemCount = @Model.Order.OrderItems.Count;

        // Dynamically toggle Customer and Supplier fields based on Order Type
        document.getElementById("orderTypeSelect").addEventListener("change", function () {
            const orderType = this.value;
            document.getElementById("customerDiv").style.display = orderType === "1" ? "block" : "none";
            document.getElementById("supplierDiv").style.display = orderType === "2" ? "block" : "none";
        });

        // Add a new order item row
        function addOrderItem() {
            const container = document.getElementById("orderItemsContainer").getElementsByTagName("tbody")[0];

            // Generate product options dynamically
            const productOptions = productList.map(product =>
                `<option value="${product.value}">${product.text}</option>`
            ).join("");

            const newRowHTML = `
            <tr id="orderItem_${itemCount}">
                <td>
                    <select name="Order.OrderItems[${itemCount}].ProductId" class="form-select">
                        <option value="">-- Select Product --</option>
                        ${productOptions}
                    </select>
                </td>
                <td>
                    <input type="number" name="Order.OrderItems[${itemCount}].Quantity" class="form-control" min="1" oninput="calculateTotalPrice(${itemCount})" required />
                </td>
                <td>
                    <input type="number" name="Order.OrderItems[${itemCount}].UnitPrice" class="form-control" step="0.01" oninput="calculateTotalPrice(${itemCount})" required />
                </td>
                <td>
                    <input type="text" id="totalPrice_${itemCount}" class="form-control" readonly />
                </td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm" onclick="removeOrderItem(${itemCount})">Remove</button>
                </td>
            </tr>`;
            container.insertAdjacentHTML("beforeend", newRowHTML);
            itemCount++;
        }

        // Remove an order item row
        function removeOrderItem(index) {
            const row = document.getElementById(`orderItem_${index}`);
            if (row) row.remove();
            calculateTotalOrderPrice(); // Recalculate total after removing an item
        }

        // Calculate total price for an individual order item
        function calculateTotalPrice(index) {
            const quantityElement = document.querySelector(`#orderItem_${index} input[name="Order.OrderItems[${index}].Quantity"]`);
            const unitPriceElement = document.querySelector(`#orderItem_${index} input[name="Order.OrderItems[${index}].UnitPrice"]`);
            const totalPriceElement = document.getElementById(`totalPrice_${index}`);

            const quantity = parseFloat(quantityElement?.value) || 0;
            const unitPrice = parseFloat(unitPriceElement?.value) || 0;
            const totalPrice = (quantity * unitPrice).toFixed(2);

            if (totalPriceElement) {
                totalPriceElement.value = totalPrice;
            }

            calculateTotalOrderPrice(); // Update the total order price whenever an item changes
        }

        // Calculate the total price of all order items
        function calculateTotalOrderPrice() {
            let totalOrderPrice = 0;

            document.querySelectorAll("input[id^='totalPrice_']").forEach(input => {
                totalOrderPrice += parseFloat(input.value) || 0;
            });

            const totalOrderPriceElement = document.getElementById("totalOrderPrice");
            if (totalOrderPriceElement) {
                totalOrderPriceElement.value = totalOrderPrice.toFixed(2);
            }
        }
    </script>

}
